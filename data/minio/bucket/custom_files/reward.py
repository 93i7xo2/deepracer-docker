
import math

cx = [7.114828586578369, 7.311397315546687, 7.506102641942902, 7.697081163194914, 7.8824694767306225, 8.060404179977924, 8.229021870364718, 8.385126309745191, 8.517810263590773, 8.61341156728032, 8.661865029399191, 8.661772972103563, 8.61301553015837, 8.516755818029912, 8.379922212367306, 8.211091522741347, 8.019522661987802, 7.815155755359503, 7.607960482979417, 7.406311760348879, 7.209833709432543, 7.015164546486656, 6.818939936176529, 6.617795543167465, 6.409889031489873, 6.20094149687745, 5.999019002889635, 5.812188327717156, 5.648482405901105, 5.514971093107101, 5.417645806693224, 5.362268972187352, 5.35175649669535, 5.38668435715824, 5.466547631186306, 5.586357149681593, 5.7398319092549395, 5.919091839263839, 6.114351214286135, 6.315788171855707, 6.517171593088642, 6.717359028996719, 6.915594403460459, 7.11141034198995, 7.306135616865416, 7.501788644503738, 7.700389265302612, 7.902487488903995, 8.102149827408711, 8.29165566936143, 8.462694908000758, 8.603213276019828, 8.700192680737826, 8.748880100955153, 8.751302608644353, 8.709305794915457, 8.62305537203542, 8.493114778401651, 8.328535001984894, 8.143202832162121, 7.9498810731225165, 7.753101424082593, 7.553890111771586, 7.353260404277271, 7.152225569687426, 6.951656717591362, 6.751687579453779, 6.552213538033338, 6.353129856527907, 6.154331798135362, 5.955714626053569, 5.757173603480398, 5.5586039936137235, 5.359901059651412, 5.160971123785758, 4.961804511526206, 4.762430106068879, 4.56287699279452, 4.363174257083857, 4.163350984317635, 3.9634362598765858, 3.7634591691414467, 3.563448797492951, 3.3634335498244323, 3.163428893461494, 2.963438707192725, 2.7634664601514793, 2.5635156214711077, 2.36358966028497, 2.163692045726415, 1.963826246928797, 1.7639957330254692, 1.5642039731497805, 1.3644544364350917, 1.164750371999162, 0.9650917063232919, 0.7654757924006295, 0.5658999161110999, 0.36636136333461816, 0.1668574199511022, -0.032614628159529716, -0.23205749511736296, -0.4314738950424722, -0.6308665420549429, -0.8302381502748565, -1.0295914338222953, -1.2289291068173445, -1.4282538833800789, -1.6275684776305837, -1.8268756036889406, -2.0261779756752314, -2.2254783077095417, -2.4247793139119462, -2.62408370840253, -2.823394205301376, -3.0227130857195603, -3.222040565919865, -3.4213740721241868, -3.6207112192439466, -3.8200496221905618, -4.019386895875452, -4.218720655210037, -4.418048515105727, -4.617368090473945, -4.816676996226106, -5.0159728472736305, -5.215253258527939, -5.414515844900443, -5.613758221302562, -5.812978002645715, -6.0121728038413185, -6.211340239800796, -6.410477925435557, -6.609583475657022, -6.80865450537661, -7.007481623362462, -7.204158094617769, -7.395945584647394, -7.580100054703951, -7.753797822488335, -7.9108957732046905, -8.040804915825804, -8.133503131247226, -8.184815139435354, -8.192466220641808, -8.150773294094549, -8.054968308361124, -7.915507404198486, -7.748363813208766, -7.5644414221602965, -7.3710937629393625, -7.1725339927324585, -6.9719602082791905, -6.772566620656518, -6.57694620164983, -6.386396637634053, -6.202047292000084, -6.025024437483211, -5.8558939652882644, -5.694015126134177, -5.538590461155947, -5.38882251148857, -5.243925077435928, -5.103434642584301, -4.9672503298313195, -4.83529054660302, -4.707473700325429, -4.583470969671011, -4.461332734983786, -4.338456495229397, -4.212237954396905, -4.080164206364835, -3.943071679150881, -3.806033534411146, -3.6743939552141915, -3.5504203074013048, -3.426447682716553, -3.292810768204965, -3.1398442509115547, -2.9607969920427912, -2.7624446177916635, -2.5554846168397463, -2.3504531290564796, -2.15390203497136, -1.9682466720126512, -1.7957909162988412, -1.639496718216078, -1.5026467235438201, -1.3878046350665865, -1.2918842710615415, -1.2091327488164387, -1.1330695719211215, -1.0556205725974874, -0.9695040110805725, -0.8736140680911993, -0.7691809913776694, -0.657227509099764, -0.5353357377516745, -0.3982939624728109, -0.24081023154087794, -0.06026888214582444, 0.13706492367208456, 0.3430863352924253, 0.5497496021222071, 0.7515694875466621, 0.9465486553341274, 1.1329398206089816, 1.3087268743677791, 1.4708072039710165, 1.615803739949635, 1.7405542176136, 1.8478362174649359, 1.946981890836584, 2.0476615128777644, 2.158990422755595, 2.282764217218171, 2.4156079707776086, 2.5540380134264735, 2.6949151183087467, 2.8388999303661673, 2.9890109864893755, 3.1479886929740215, 3.3156979854861164, 3.4904583064292307, 3.6705744876559154, 3.8544476203163485, 4.040723170364036, 4.228084805661005, 4.415606207923244, 4.60439634140134, 4.7962259135225995, 4.992760683227733, 5.193054550037932, 5.393439476592871, 5.590123973040643, 5.780808638134999, 5.966935081615888, 6.150518158269228, 6.333206638573111, 6.515974791504602, 6.699706602023341, 6.884661137672566, 7.0703193974081096]
cy = [3.390172004699707, 3.337049713060901, 3.280261982997113, 3.216143376083362, 3.1410284538946645, 3.0512517780060397, 2.9431479099925055, 2.813412702318531, 2.660832222323264, 2.4849537717000443, 2.2887949069287368, 2.0837247197977096, 1.8823435314476087, 1.698184935131068, 1.5489763226524704, 1.4527594398921155, 1.407766065956919, 1.39244138514599, 1.384372126707512, 1.364663684896861, 1.3337290750345152, 1.2985693705082038, 1.2661912744980584, 1.2436014901842107, 1.2346372866505646, 1.2273857304023892, 1.2050506920961914, 1.1508345542296694, 1.0484848546009844, 0.8972624565318223, 0.713799764707844, 0.5153098447282031, 0.31341762663491546, 0.11515441238938381, -0.07168973254956772, -0.23535637855891828, -0.3632749197139086, -0.4521442118121696, -0.5097101567614354, -0.544291710524535, -0.5607237825973677, -0.5589038198122996, -0.5383543770058082, -0.4999531392436295, -0.45300868541114786, -0.41006669983867505, -0.3836795508487446, -0.38502054093038157, -0.41917984367786276, -0.4895708675021871, -0.598740024283446, -0.743726835217258, -0.9191660058311713, -1.1155722877690668, -1.320086205600251, -1.5197009089681985, -1.7011993267769854, -1.8522566737782584, -1.969927311361909, -2.0566093842499455, -2.1151431545891213, -2.151019544939624, -2.1708583441782827, -2.1812835142495843, -2.1889190170980126, -2.1994530723561985, -2.213720191165952, -2.230985981145028, -2.250515262915737, -2.2715728571003857, -2.293423584321284, -2.315332265200741, -2.3365637203610654, -2.356382770424566, -2.3741391711305337, -2.3898278391883814, -2.4037398214531622, -2.416167717595041, -2.4274041272841815, -2.4377416501907483, -2.447472885984906, -2.456890434336818, -2.4662868949166503, -2.475939857813493, -2.48584154784895, -2.4957285802868006, -2.5053285345829277, -2.5143689901932134, -2.52257752657354, -2.52968172317979, -2.535409159467845, -2.539487414893588, -2.5416440689129014, -2.5416067009816663, -2.5391193547575748, -2.5341747133562014, -2.5269580391011592, -2.517659616532051, -2.5064697301884804, -2.493578664610049, -2.479176704336361, -2.4634541339070184, -2.446601237861624, -2.4288083007397807, -2.4102656070810924, -2.3911634414251606, -2.3716920883115886, -2.35204183227998, -2.332402957869936, -2.312965749621061, -2.2939204920729575, -2.275457469765228, -2.2577669672374756, -2.241039269029303, -2.225464659680313, -2.2112163600051002, -2.1982238021997467, -2.1862344795849764, -2.1749915247166234, -2.1642380701505206, -2.153717248442501, -2.1431721921483984, -2.1323460338240463, -2.120981906025279, -2.1088229413079276, -2.095612272227828, -2.081093031340812, -2.0650083512027146, -2.047101364369367, -2.0271152033966056, -2.0047930008402615, -1.979877889256168, -1.9521130012001602, -1.9212414692280708, -1.8870064258957335, -1.8487697990336662, -1.8027678340484348, -1.7437053741702704, -1.666276758168608, -1.5652353626586386, -1.437795179578611, -1.2844658217869263, -1.106798774751282, -0.9117494526002998, -0.7090659469459327, -0.5125882583533109, -0.336849289137813, -0.18964585808308193, -0.07581616193249006, 0.0027927676717404556, 0.047993654635725504, 0.07171493923888297, 0.08918638964988981, 0.11561202665356572, 0.1611762292039124, 0.22524926460205028, 0.30579610095536197, 0.4007819823672583, 0.5082221950999604, 0.6262397786008594, 0.7529717665078397, 0.8865551924587871, 1.0251554817715778, 1.1677508104416603, 1.3142329333037912, 1.4645421531710212, 1.6186187728564176, 1.7761589899206593, 1.9352586808482235, 2.093369089283212, 2.2479396865709718, 2.3965239667617704, 2.5404877361731897, 2.6860191780348557, 2.839614757208923, 3.003595142361081, 3.166801113904407, 3.315358542097516, 3.435393297199039, 3.5157581069314583, 3.557962993338723, 3.567187752269252, 3.548480308562325, 3.5036310339448824, 3.4310482389615355, 3.3295007194832356, 3.201974868907565, 3.053512417186008, 2.889113150372478, 2.7133400499634406, 2.5305500362531426, 2.3450668219533344, 2.161142495187977, 1.982333137714222, 1.8079936734163327, 1.6358899211364366, 1.4642543375950825, 1.2989445510604587, 1.1520099502857646, 1.0356781700959303, 0.9583200153078654, 0.9155080343086343, 0.9001635796114552, 0.9053083787866377, 0.9283152637129213, 0.9724837277166114, 1.04153821443526, 1.137916958025257, 1.2588597333773226, 1.4002931558110994, 1.5581067080593396, 1.72716307313285, 1.9011918689053318, 2.0738642629997934, 2.23920811366585, 2.395956116456945, 2.5461643715634534, 2.6919588757981607, 2.83516860744374, 2.974345857958549, 3.106009672972261, 3.226924967828937, 3.336391572511454, 3.435071769971194, 3.523642103540654, 3.6032657564789763, 3.6763413515224195, 3.745460641571556, 3.812600117498902, 3.876525532796265, 3.934958715349096, 3.9854830534944505, 4.022261984204289, 4.0358948583883185, 4.016830967323501, 3.9619333642942713, 3.884145886287304, 3.798839755349904, 3.7161133397657857, 3.6363499020292602, 3.5588858228169835, 3.483033063900288, 3.408073183700152]


class np:
    pi = 3.14159265358979323846

    @staticmethod
    def hypot(sx, sy):
        return [ math.sqrt(x**2 + y**2) for x, y in zip(sx, sy) ]

    @staticmethod
    def cos(a):
        if isinstance(a, (list, tuple)):
            return [math.cos(x) for x in a]
        else:
            return math.cos(a)

    @staticmethod
    def sin(a):
        if isinstance(a, (list, tuple)):
            return [math.sin(x) for x in a]
        else:
            return math.sin(a)

    @staticmethod
    def argmin(d):
        idx = 0
        mn = d[0]

        for i in range(len(d)):
            if d[i] < mn:
                idx = i
                mn = d[i]

        return idx

    @staticmethod
    def dot(x, y):
        return x[0]*y[0]+x[1]*y[1]

    @staticmethod
    def arctan2(y, x):
        return math.atan2(y, x)

    @staticmethod
    def radian(x):
        return x*0.01745329251


L = 0.25  # [m] Wheel base of vehicle
k = 5.0 # control gain
max_steer = 0.34906585039 #rad
max_diff = 40 #deg


class State(object):
    def __init__(self):
        self.x = 0
        self.y = 0
        self.yaw = 0
        self.v = 0


class Info(object):
    def __init__(self):
        self.closest_waypoint = 0
        self.next_waypoint = 0
        self._d = []
        self.distance_from_waypoint = 0
        self.is_left = False
        self.angle = 0


RIGHT = False
LEFT = True

side_note = {
    '0-20':    RIGHT, #right
    '21-44':   LEFT, #left
    '45-154':  RIGHT, #right
    '155-178': LEFT, #left
    '179-195': RIGHT, #right
    '196-211': LEFT, #left
    '212-242': RIGHT
}

side = {}

for k, v in side_note.items():
    st, ed = [int(n) for n in k.split('-')]

    for idx in range(st, ed+1):
        side[idx] = v



def on_the_correct_side(p, is_left):
    return not (is_left != side[p])
    

def calc_info(state, cx, cy):
    info = Info()
    fx = state.x
    fy = state.y

    # Search the index of the nearest point to the front axle
    dx = [fx - icx for icx in cx]
    dy = [fy - icy for icy in cy]
    d = np.hypot(dx, dy)

    closest_idx = np.argmin(d)
    prev_idx = (closest_idx + len(d)-1) % len(d)
    next_idx = (closest_idx + 1) % len(d)

    prev_d = d[prev_idx]
    next_d = d[next_idx]

    if prev_d < next_d:
        p2_idx = closest_idx
        p1_idx = prev_idx
    else:
        p2_idx = next_idx
        p1_idx = closest_idx

    p1 = [cx[p1_idx], cy[p1_idx]]
    p2 = [cx[p2_idx], cy[p2_idx]]

    u = [fx-p1[0], fy-p1[1]]
    v = [p2[0]-p1[0], p2[1]-p1[1]]

    # left or right
    cross = u[0]*v[1]-u[1]*v[0]
    is_left = (cross < 0)

    # compute angle
    uv_dot = np.dot(u, v)
    u_norm = math.sqrt(np.dot(u, u))
    v_norm = math.sqrt(np.dot(v, v))

    angle = min(math.acos( max(min(uv_dot/(u_norm*v_norm), 1.0), -1.0) )*57.2957795131, 180)

    vv = [v[1], -v[0]] # perpendicular v
    n = math.sqrt(vv[0]**2 + vv[1]**2) #norm
    vv_n = [vv[0]/n, vv[1]/n] # normalize vv

    dist = abs(np.dot(u, vv_n))

    info.closest_waypoint = closest_idx
    info._d = d
    info.is_left = is_left
    info.distance_from_waypoint = dist
    info.angle = angle

    return info


def reward_function(params):
    distance_from_center = params['distance_from_center']
    x = params['x']
    y = params['y']
    #closest_waypoints = params['closest_waypoints']
    #is_left_of_center = params['is_left_of_center']
    #progress = params['progress']
    #speed = params['speed']
    #steering_angle = params['steering_angle']
    #steps = params['steps']
    track_width = params['track_width']
    #heading = params['heading']

    state = State()
    state.x = x
    state.y = y
    #state.yaw = np.radian(heading)
    #state.v = speed

    rew = 1e-3
        
    if distance_from_center < track_width*0.5:
        info = calc_info(state, cx, cy)

        norm_dist = info.distance_from_waypoint/track_width

        if norm_dist < 0.1:
            rew = 1.0
        elif norm_dist < 0.3:
            rew = 0.5
        elif norm_dist < 0.5:
            rew = 0.1

        if on_the_correct_side(info.closest_waypoint, info.is_left):
            rew *= 2.0
        
            if info.angle < 15:
                rew *= 2.0

    return rew
